#include<stdio.h>
#include<stdlib.h>
typedef struct node
{
	int data;
	struct node *left,*right;
	}node;
	node *create(node *root)
	{
	int i,n;
	node *temp,*parent,*newnode;
	printf("enter limit:");
	scanf("%d",&n);
	for(i=0;i<n;i++)
	{
	printf("enter value:");
	newnode=(node*)malloc(sizeof(node));
	scanf("%d",&newnode->data);
	newnode->left=NULL;
	newnode->right=NULL;
	if(root==NULL)
	{
	root=newnode;
	continue;
	}
	temp=root;
	while(temp!=NULL)
	{
	parent=temp;
	if(newnode->data<temp->data)
	temp=temp->left;
	else
	temp=temp->right;
	}
	if(newnode->data<parent->data)
	parent->left=newnode;
	else
	parent->right=newnode;
	}
	return root;
	}
	void inorder(node *root)
	{
	node *temp=root;
	if(temp!=NULL)
	{
	inorder(temp->left);
	printf("%d\t",temp->data);
	inorder(temp->right);
	}
}

	void preorder(node *root)
	{
	node *temp=root;
	if(temp!=NULL)
	{
	printf("%d\t",temp->data);
	preorder(temp->left);
	preorder(temp->right);
	}
}

	void postorder(node *root)
	{
	node *temp=root;
	if(temp!=NULL)
	{
	postorder(temp->left);
	postorder(temp->right);
	printf("%d\t",temp->data);
	}
}

	struct node *copy(node *root)
	{
	node *temp=root,*newnode;
	if(temp!=NULL)
	{
	newnode=(node*)malloc(sizeof(node));
	newnode->data=temp->data;
	newnode->left=copy(temp->left);
	newnode->right=copy(temp->right);
	return(newnode);
	}
	else
	return NULL;
	}
	

	
	int main()
	{
	node *root=NULL,*newnode,*root1=NULL;
	root=create(root);
	printf("\n inorder display:");
	inorder(root);
	printf("\n preorder display:");
	preorder(root);
	printf("\n postorder display:");
	postorder(root);
	
	
	printf("\n \n copied TREE DISPLAY:\n");
	root1=copy(root);
	printf("\n inorder copy tree display:");
	inorder(root1);
	printf("\n preorder copy tree display:");
	preorder(root1);
	printf("\n postorder copy tree display display:");
	postorder(root1);
	}
	
